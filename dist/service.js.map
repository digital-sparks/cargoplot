{
  "version": 3,
  "sources": ["../bin/live-reload.js", "../src/service.js"],
  "sourcesContent": ["new EventSource(`${SERVE_ORIGIN}/esbuild`).addEventListener('change', () => location.reload());\n", "window.Webflow ||= [];\nwindow.Webflow.push(() => {\n  // Configuration\n  const CONFIG = {\n    API_URL: 'https://app.cargoplot.com/api/bookings/sea?limit=5',\n    PROXY_URL: 'https://corsproxy.io/?', // Consider using your own CORS proxy in production\n    TIMEOUT: 10000, // 10 seconds\n    MAX_RETRIES: 3,\n    RETRY_DELAY: 1000, // 1 second\n    DEBUG: false, // Set to true for development\n  };\n\n  // Utility functions\n  const log = (...args) => {\n    if (CONFIG.DEBUG) console.log('[BookingsTable]', ...args);\n  };\n\n  const logError = (...args) => {\n    if (CONFIG.DEBUG) console.error('[BookingsTable]', ...args);\n  };\n\n  const delay = (ms) => new Promise((resolve) => setTimeout(resolve, ms));\n\n  // Create loading indicator\n  function showLoading(tableBody) {\n    tableBody.innerHTML = `\n      <tr class=\"fs-table_row\">\n        <td class=\"fs-table_cell\" colspan=\"4\" style=\"text-align: center; padding: 2rem;\">\n          <div style=\"display: flex; align-items: center; justify-content: center; gap: 0.5rem;\">\n            <div style=\"width: 16px; height: 16px; border: 2px solid #f3f3f3; border-top: 2px solid #3498db; border-radius: 50%; animation: spin 1s linear infinite;\"></div>\n            Loading bookings...\n          </div>\n        </td>\n      </tr>\n    `;\n  }\n\n  // Show error message\n  function showError(tableBody, message) {\n    tableBody.innerHTML = `\n      <tr class=\"fs-table_row\">\n        <td class=\"fs-table_cell\" colspan=\"4\" style=\"text-align: center; padding: 2rem; color: #e74c3c;\">\n          <div>\n            <strong>Unable to load bookings</strong><br>\n            <small>${message}</small><br>\n            <button onclick=\"location.reload()\" style=\"margin-top: 1rem; padding: 0.5rem 1rem; background: #3498db; color: white; border: none; border-radius: 4px; cursor: pointer;\">\n              Try Again\n            </button>\n          </div>\n        </td>\n      </tr>\n    `;\n  }\n\n  // Fetch with timeout\n  async function fetchWithTimeout(url, options = {}) {\n    const controller = new AbortController();\n    const timeoutId = setTimeout(() => controller.abort(), CONFIG.TIMEOUT);\n\n    try {\n      const response = await fetch(url, {\n        ...options,\n        signal: controller.signal,\n      });\n      clearTimeout(timeoutId);\n      return response;\n    } catch (error) {\n      clearTimeout(timeoutId);\n      throw error;\n    }\n  }\n\n  // Fetch bookings with retry logic\n  async function fetchBookings(retryCount = 0) {\n    try {\n      const apiUrl = CONFIG.API_URL;\n      const fullUrl = CONFIG.PROXY_URL + encodeURIComponent(apiUrl);\n\n      log(`Fetching bookings (attempt ${retryCount + 1}):`, apiUrl);\n\n      const response = await fetchWithTimeout(fullUrl, {\n        headers: {\n          Accept: 'application/json',\n          'Content-Type': 'application/json',\n        },\n      });\n\n      if (!response.ok) {\n        throw new Error(`API returned ${response.status}: ${response.statusText}`);\n      }\n\n      const data = await response.json();\n\n      // Validate response data\n      if (!Array.isArray(data)) {\n        throw new Error('Invalid response format: expected array');\n      }\n\n      return data;\n    } catch (error) {\n      logError('Fetch attempt failed:', error.message);\n\n      if (retryCount < CONFIG.MAX_RETRIES) {\n        log(`Retrying in ${CONFIG.RETRY_DELAY}ms... (${retryCount + 1}/${CONFIG.MAX_RETRIES})`);\n        await delay(CONFIG.RETRY_DELAY * (retryCount + 1)); // Exponential backoff\n        return fetchBookings(retryCount + 1);\n      }\n\n      throw error;\n    }\n  }\n\n  // Sanitize text content\n  function sanitizeText(text) {\n    if (typeof text !== 'string') return String(text || '');\n    return text.trim().substring(0, 100); // Limit length for safety\n  }\n\n  // Populate table with booking data\n  function populateTable(tableBody, bookings) {\n    const fragment = document.createDocumentFragment();\n\n    bookings.forEach((booking, index) => {\n      // Validate booking object\n      if (!booking || typeof booking !== 'object') {\n        logError(`Invalid booking at index ${index}:`, booking);\n        return;\n      }\n\n      const row = document.createElement('tr');\n      row.className = 'fs-table_row';\n      row.setAttribute('data-booking-index', index);\n\n      const fields = ['from', 'to', 'size', 'booked'];\n\n      fields.forEach((field) => {\n        const cell = document.createElement('td');\n        cell.className = 'fs-table_cell';\n        cell.textContent = sanitizeText(booking[field]);\n        cell.setAttribute('data-field', field);\n        row.appendChild(cell);\n      });\n\n      fragment.appendChild(row);\n    });\n\n    tableBody.innerHTML = '';\n    tableBody.appendChild(fragment);\n\n    log(`Successfully populated table with ${bookings.length} bookings`);\n  }\n\n  // Main function\n  async function populateBookingsTable() {\n    const tableBody = document.querySelector('.fs-table_body');\n\n    if (!tableBody) {\n      logError('Table body element not found (.fs-table_body)');\n      return;\n    }\n\n    try {\n      showLoading(tableBody);\n\n      const bookings = await fetchBookings();\n\n      if (bookings.length === 0) {\n        tableBody.innerHTML = `\n          <tr class=\"fs-table_row\">\n            <td class=\"fs-table_cell\" colspan=\"4\" style=\"text-align: center; padding: 2rem;\">\n              No bookings available at this time\n            </td>\n          </tr>\n        `;\n        return;\n      }\n\n      populateTable(tableBody, bookings);\n    } catch (error) {\n      logError('Failed to populate bookings table:', error);\n\n      let errorMessage = 'Please try again later';\n\n      if (error.name === 'AbortError') {\n        errorMessage = 'Request timed out';\n      } else if (error.message.includes('Failed to fetch')) {\n        errorMessage = 'Network connection issue';\n      } else if (error.message.includes('API returned')) {\n        errorMessage = 'Service temporarily unavailable';\n      }\n\n      showError(tableBody, errorMessage);\n    }\n  }\n\n  // Add CSS for loading spinner if not already present\n  if (!document.querySelector('#bookings-table-styles')) {\n    const style = document.createElement('style');\n    style.id = 'bookings-table-styles';\n    style.textContent = `\n      @keyframes spin {\n        0% { transform: rotate(0deg); }\n        100% { transform: rotate(360deg); }\n      }\n    `;\n    document.head.appendChild(style);\n  }\n\n  // Initialize\n  populateBookingsTable();\n});\n"],
  "mappings": ";;AAAA,MAAI,YAAY,GAAG,uBAAY,UAAU,EAAE,iBAAiB,UAAU,MAAM,SAAS,OAAO,CAAC;;;ACA7F,SAAO,YAAY,CAAC;AACpB,SAAO,QAAQ,KAAK,MAAM;AAExB,UAAM,SAAS;AAAA,MACb,SAAS;AAAA,MACT,WAAW;AAAA;AAAA,MACX,SAAS;AAAA;AAAA,MACT,aAAa;AAAA,MACb,aAAa;AAAA;AAAA,MACb,OAAO;AAAA;AAAA,IACT;AAGA,UAAM,MAAM,IAAI,SAAS;AACvB,UAAI,OAAO;AAAO,gBAAQ,IAAI,mBAAmB,GAAG,IAAI;AAAA,IAC1D;AAEA,UAAM,WAAW,IAAI,SAAS;AAC5B,UAAI,OAAO;AAAO,gBAAQ,MAAM,mBAAmB,GAAG,IAAI;AAAA,IAC5D;AAEA,UAAM,QAAQ,CAAC,OAAO,IAAI,QAAQ,CAAC,YAAY,WAAW,SAAS,EAAE,CAAC;AAGtE,aAAS,YAAY,WAAW;AAC9B,gBAAU,YAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAUxB;AAGA,aAAS,UAAU,WAAW,SAAS;AACrC,gBAAU,YAAY;AAAA;AAAA;AAAA;AAAA;AAAA,qBAKL,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAQ1B;AAGA,mBAAe,iBAAiB,KAAK,UAAU,CAAC,GAAG;AACjD,YAAM,aAAa,IAAI,gBAAgB;AACvC,YAAM,YAAY,WAAW,MAAM,WAAW,MAAM,GAAG,OAAO,OAAO;AAErE,UAAI;AACF,cAAM,WAAW,MAAM,MAAM,KAAK;AAAA,UAChC,GAAG;AAAA,UACH,QAAQ,WAAW;AAAA,QACrB,CAAC;AACD,qBAAa,SAAS;AACtB,eAAO;AAAA,MACT,SAAS,OAAO;AACd,qBAAa,SAAS;AACtB,cAAM;AAAA,MACR;AAAA,IACF;AAGA,mBAAe,cAAc,aAAa,GAAG;AAC3C,UAAI;AACF,cAAM,SAAS,OAAO;AACtB,cAAM,UAAU,OAAO,YAAY,mBAAmB,MAAM;AAE5D,YAAI,8BAA8B,aAAa,CAAC,MAAM,MAAM;AAE5D,cAAM,WAAW,MAAM,iBAAiB,SAAS;AAAA,UAC/C,SAAS;AAAA,YACP,QAAQ;AAAA,YACR,gBAAgB;AAAA,UAClB;AAAA,QACF,CAAC;AAED,YAAI,CAAC,SAAS,IAAI;AAChB,gBAAM,IAAI,MAAM,gBAAgB,SAAS,MAAM,KAAK,SAAS,UAAU,EAAE;AAAA,QAC3E;AAEA,cAAM,OAAO,MAAM,SAAS,KAAK;AAGjC,YAAI,CAAC,MAAM,QAAQ,IAAI,GAAG;AACxB,gBAAM,IAAI,MAAM,yCAAyC;AAAA,QAC3D;AAEA,eAAO;AAAA,MACT,SAAS,OAAO;AACd,iBAAS,yBAAyB,MAAM,OAAO;AAE/C,YAAI,aAAa,OAAO,aAAa;AACnC,cAAI,eAAe,OAAO,WAAW,UAAU,aAAa,CAAC,IAAI,OAAO,WAAW,GAAG;AACtF,gBAAM,MAAM,OAAO,eAAe,aAAa,EAAE;AACjD,iBAAO,cAAc,aAAa,CAAC;AAAA,QACrC;AAEA,cAAM;AAAA,MACR;AAAA,IACF;AAGA,aAAS,aAAa,MAAM;AAC1B,UAAI,OAAO,SAAS;AAAU,eAAO,OAAO,QAAQ,EAAE;AACtD,aAAO,KAAK,KAAK,EAAE,UAAU,GAAG,GAAG;AAAA,IACrC;AAGA,aAAS,cAAc,WAAW,UAAU;AAC1C,YAAM,WAAW,SAAS,uBAAuB;AAEjD,eAAS,QAAQ,CAAC,SAAS,UAAU;AAEnC,YAAI,CAAC,WAAW,OAAO,YAAY,UAAU;AAC3C,mBAAS,4BAA4B,KAAK,KAAK,OAAO;AACtD;AAAA,QACF;AAEA,cAAM,MAAM,SAAS,cAAc,IAAI;AACvC,YAAI,YAAY;AAChB,YAAI,aAAa,sBAAsB,KAAK;AAE5C,cAAM,SAAS,CAAC,QAAQ,MAAM,QAAQ,QAAQ;AAE9C,eAAO,QAAQ,CAAC,UAAU;AACxB,gBAAM,OAAO,SAAS,cAAc,IAAI;AACxC,eAAK,YAAY;AACjB,eAAK,cAAc,aAAa,QAAQ,KAAK,CAAC;AAC9C,eAAK,aAAa,cAAc,KAAK;AACrC,cAAI,YAAY,IAAI;AAAA,QACtB,CAAC;AAED,iBAAS,YAAY,GAAG;AAAA,MAC1B,CAAC;AAED,gBAAU,YAAY;AACtB,gBAAU,YAAY,QAAQ;AAE9B,UAAI,qCAAqC,SAAS,MAAM,WAAW;AAAA,IACrE;AAGA,mBAAe,wBAAwB;AACrC,YAAM,YAAY,SAAS,cAAc,gBAAgB;AAEzD,UAAI,CAAC,WAAW;AACd,iBAAS,+CAA+C;AACxD;AAAA,MACF;AAEA,UAAI;AACF,oBAAY,SAAS;AAErB,cAAM,WAAW,MAAM,cAAc;AAErC,YAAI,SAAS,WAAW,GAAG;AACzB,oBAAU,YAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOtB;AAAA,QACF;AAEA,sBAAc,WAAW,QAAQ;AAAA,MACnC,SAAS,OAAO;AACd,iBAAS,sCAAsC,KAAK;AAEpD,YAAI,eAAe;AAEnB,YAAI,MAAM,SAAS,cAAc;AAC/B,yBAAe;AAAA,QACjB,WAAW,MAAM,QAAQ,SAAS,iBAAiB,GAAG;AACpD,yBAAe;AAAA,QACjB,WAAW,MAAM,QAAQ,SAAS,cAAc,GAAG;AACjD,yBAAe;AAAA,QACjB;AAEA,kBAAU,WAAW,YAAY;AAAA,MACnC;AAAA,IACF;AAGA,QAAI,CAAC,SAAS,cAAc,wBAAwB,GAAG;AACrD,YAAM,QAAQ,SAAS,cAAc,OAAO;AAC5C,YAAM,KAAK;AACX,YAAM,cAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAMpB,eAAS,KAAK,YAAY,KAAK;AAAA,IACjC;AAGA,0BAAsB;AAAA,EACxB,CAAC;",
  "names": []
}
